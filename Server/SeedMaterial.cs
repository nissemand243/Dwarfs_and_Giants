namespace SE_training.Server;

using SE_training.Core;

public static class SeedMaterial
{

    public static async Task<IHost> SeedAsync(this IHost host)
    {
        using (var scope = host.Services.CreateScope())
        {
            var context = scope.ServiceProvider.GetRequiredService<DatabaseContext>();

            await SeedMaterialAsync(context);
        }
        return host;
    }

    private static async Task SeedMaterialAsync(DatabaseContext context)
    {
        //Fake data to use for seeding our database

        await context.Database.MigrateAsync();

        if (!await context.Materials.AnyAsync())
        {
            context.Users.AddRange(
                new User { Name = "Rasmus C# Guro", Email = "RasmusMail@itu.dk" },
                new User { Name = "Pavlo Software Enginere", Email = "PavloMail@itu.dk" },
                new User { Name = "Mads Cornelius", Email = "mads@itu.dk" },
                new User { Name = "Jack Jensen", Email = "jack@itu.dk" },
                new User { Name = "Rasmus Balthazar", Email = "rasmus@itu.dk" },
                new User { Name = "Anton Grilles", Email = "anton@itu.dk" },
                new User { Name = "NaddiGnome", Email = "nadi@itu.dk" }
            );

            // all this text is generated by useing https://app.inferkit.com/demo
            var Lambda = "Lambdas in C# are used foreach () .\nAnother common use of lambdas in the source code is to define some lazy code.\nA good example of this in Java code is:\nLambdas are one way to express closures and an imperative approach of using a lambda might be:\n In the above example a lambda expression could have been replaced by:\nJavaScript programmers can use dynamic typing like";
            var DataAccess = "Sql used to be mostly in pgadmin but now you can use SQL in C# , Visual Basic, C, C++, F#, Delphi, VB.Net, JavaScript, Python and Ruby.\nHow to Install SQL?\nSQL can be installed using Microsoft SQL server 2013 Enterprise edition.\nIf you are not using a dedicated server you can use Azure SQL Database which is integrated into Azure, a cloud computing platform by Microsoft.\nI have setup SQL Server 2012";
            var Injection = "Dependency Injection in C# is incredibly useful because it allows the developer to create objects and attributes (based on available properties) and to use them in our code. In this post I will demonstrate how to use and extend these objects in various ways and try to answer the following questions:\nWhen can a Dependency Injection Container be used?\nHow to use it?\nWhat are the alternatives to using";
            var Asynchronous = "Asynchronous functions use multithreading to run multiple sets of code at the same times. They return immediately, but await might return when the other code finishes, then act again on those results. Agoras is a JavaScript framework for asynchronous programming. You declare your await methods with async: function asyncValue( ) { var value = \"Hello, World!\"; console.log(value); } ";
            var JsonRest = "JSON and Rest-Beans in Java?\nJSON is such a common and interesting format that there is no reason to not bring it into Java. Of course, the use of a database for building the data structure makes this a bit more complicated, but in combination with Rest-Beans, it can work very well.\nJSON-LD provides the Java static interface for the JSON-LD standard and Java provides the HQL equivalent for REST, which the REST-Beans expose.\nHere is an example of a possible REST-Beans:\nThis REST-Beans represents a REST";
            var CoreApi = "Core API  is also available on Linux and BSD with SDL. In an effort to make software development easier on embedded systems, SDL is used as the interface between the processor's SIMD architecture and user-mode. Software developed for the game platform can therefore be reused in other applications on other platforms. It is possible to \"publish\" programs in a self-contained \"runtime environment\" that does not need a separate application to run, but which is loaded by SDL.";
            var WebApplication = "Web Applications is a useful thing to view an application in a browser, just like anything else in a website. But since there are hundreds of types of content you can see on a web page there is an ecosystem of software that can display what's on a page in the best way for any particular user (see below). In the same way that a web developer could use a proxy to display content to users in a certain way";
            var MobilApp = "A Mobil App is a piece of software running as a small container on a user's phone, where you can use apps for music streaming, navigation, messaging, and more. Is a piece of software running as a small container on a user's phone, where you can use apps for music streaming, navigation, messaging, and more.";
            var Security = "Security is a way to keep your humus safe. After 30 years of enjoying a mixed diet of vegetables and legumes, I've become allergic to almost all legumes. They're in everything — hummus, pasta, pesto, even bread. And although legumes can contribute to a healthy diet, they're not for me. But I've gotten really good at avoiding most ingredients in hummus because, according to my dermat";
            var SoftwareEnginere = "SoftwareEnginere is one of the best educations in the world. Especially at the IT university of copenhagen,  where every descition is run with a hard hand by sapiens naturae. i did my internal training on intel and am now a keyholder in the application development department, we work together with our teammates to put software in the streets. We work in a team and we don't need a manager. There are no micromanager saying what we should do, or who to fire because of wrong behavior. What kind of work do you";
            var Requirements = "Paolo and OndFish got very hig Requirements for their students. Also The students must be able to write about requirements in a RAD (Requrement Analysis Document) so this means that the students have to write. I am not even doing that right now. I have to get going. School starts on Thursday. I love my job. And I miss my students. I don't know why I can't tell them when I will see them next. I think they need to talk to me. OndFish says, \"There is no reason why she should not have as much fun as she can with her students, at least she is keeping a sense of humor.\"";
            var UMLDiagrams = "UML diagrams can be used as a blueprint for your program, documentation, or even as a programming language interpreter. Good news: every C++ hacker on planet earth is capable of drawing UML diagrams, even you! How To Draw a UML Diagram: Drawing UML diagrams is pretty easy. In fact, it's already built into the UML editor, so you don't have to go hunting around the Internet for various tutorials on how to draw diagrams. However, to get the most from";
            var SolidPrinciples = "SOLID Principles is a important for every software engineer to know. But it also is a massive understatement of its benefits.\nIn the first post, I've listed the basic principles of the SOLID method. In the following posts, I'll elaborate on some of those principles and discuss a few practices that implement them.\nOne of the most important principles of SOLID is a separation of concerns. What it means is:\nEvery class should be a encapsulated entity.\nEvery class has a single responsibility.\nEverything inside an object has a single responsibility.\nAs a rule, when you build a class or component that";
            var OOD = "During today lecture we will go talk about how to use Architectural and Object Oriented Design.\nSince they are useful tools that every software engineer should know, I will explain those two concepts and you can learn from those design patterns.\nWe'll start by an object-oriented design.\nAn object-oriented design is a design which specifies the classes of objects, and each object must have a member variable named constructor(s), that is called in the constructor method.\nThe main purpose of this concept is that when working with the classes, it helps to perform easier operations and also to prevent duplication of methods.\nIn the following diagram, the symbols used are “>”, “||”, “&&” and “&”.\nConstructor methods of an object in an object-oriented design are following:\nIn the constructor method of an object, a reference to the object's prototype is created to keep the object in a certain state.\nTo change the state, the changes to the";
            var TestDok = "TEST DOKUMENT ÇERIMI\n1.1 PRITNJE TË RRËNËSIT QË NJEZ SHQIPTARËT PAJËSUSI TË TËMBURUR TË BANORIT TË KADRIU-MARRËGJISË\nSi prindër të rritur që jemi, por dhe më pas për tu rikthyer me përkushtim edhe më të madh, sot e kësaj dite u detyrohemi të jemi të përkushtuar ndaj atyre që kanë nevojë për ndihmën tonë të vyer në emigracion. Ata janë ata që kemi përjetuar ndjesitë e mëdha dhe me urgjencë të dalin jashtë";
            var GildedRose = "gildered rose is a kata, where the goal is to implement a stocking system where a lot of rules is applied about each items expiration and quality of materials. you might even seen made of black tape. In kabuki theatre, these multiple effects are often used. At the beginning of the show, the entire set is highly decorated with lanterns and the walls are lined with hanging sheets of paper. at the end of the show, all those posters and paper turn completely black. The owner of my favorite!";

            var path = "MaterialsData/";

            context.Materials.AddRange(
                    new Material { AuthorId = 1, Name = "Lecture03 Lambdas", Description = Lambda, FileType = FileType.Pdf, FilePath = path + "Lecture03.Pdf" },
                    new Material { AuthorId = 1, Name = "Lecture04 Data Access", Description = DataAccess, FileType = FileType.Pdf, FilePath = path + "Lecture04.Pdf" },
                    new Material { AuthorId = 1, Name = "Lecture05 Dependency Injection", Description = Injection, FileType = FileType.Pdf, FilePath = path + "Lecture05.Pdf" },
                    new Material { AuthorId = 1, Name = "Lecture06 Asynchronous", Description = Asynchronous, FileType = FileType.Pdf, FilePath = path + "Lecture06.Pdf" },
                    new Material { AuthorId = 1, Name = "Lecture07 JSON and Rest", Description = JsonRest , FileType = FileType.Pdf, FilePath = path + "Lecture07.Pdf" },
                    new Material { AuthorId = 1, Name = "Lecture08 ASP.NET Core Web API", Description = CoreApi, FileType = FileType.Pdf, FilePath = path + "Lecture08.Pdf" },
                    new Material { AuthorId = 1, Name = "Lecture09 Web Applications", Description = WebApplication, FileType = FileType.Pdf, FilePath = path + "Lecture09.Pdf" },
                    new Material { AuthorId = 1, Name = "Lecture10 Mobile Applications", Description = MobilApp, FileType = FileType.Pdf, FilePath = path + "Lecture10.Pdf" },
                    new Material { AuthorId = 1, Name = "Lecture11 Security", Description = Security, FileType = FileType.Pdf, FilePath = path + "Lecture11.Pdf" },
                    new Material { AuthorId = 2, Name = "BDSA01 Software Enginere", Description = SoftwareEnginere, FileType = FileType.Pdf, FilePath = path + "BDSA21_01.Pdf" },
                    new Material { AuthorId = 2, Name = "BDSA02 Requirements Engineering", Description = Requirements, FileType = FileType.Pdf, FilePath = path + "BDSA21_02.Pdf" },
                    new Material { AuthorId = 2, Name = "BDSA03 UML Diagrams", Description = UMLDiagrams , FileType = FileType.Pdf, FilePath = path + "BDSA21_03.Pdf" },
                    new Material { AuthorId = 2, Name = "BDSA05 SOLID Principles", Description = SolidPrinciples, FileType = FileType.Pdf, FilePath = path + "BDSA21_05.Pdf" },
                    new Material { AuthorId = 2, Name = "BDSA07 Architectural and Object Oriented Design Part 1", Description = OOD, FileType = FileType.Pdf, FilePath = path + "BDSA21_07_P1.Pdf" },
                    new Material { AuthorId = 2, Name = "BDSA07 Architectural and Object Oriented Design Part 2", Description = OOD, FileType = FileType.Pdf, FilePath = path + "BDSA21_07_P2.Pdf" },
                    new Material { AuthorId = 2, Name = "BDSA07 Architectural and Object Oriented Design Part 3", Description = OOD, FileType = FileType.Pdf, FilePath = path + "BDSA21_07_P3.Pdf" },
                    new Material { AuthorId = 2, Name = "TEST DOKUMENT", Description = TestDok, FileType = FileType.Mp4, FilePath = path + "SelfRecording.mp4" },
                    new Material { AuthorId = 1, Name = "The Gilded Rose Assignment", Description = GildedRose, FileType = FileType.jpg, FilePath = path + "Rose.jpg" });

            context.Tags.AddRange(
            PutTogether(
                MakeTags(1, "C#", "LINQ", "Pdf"),
                MakeTags(2, "C#", "LINQ", "Docker", "Pdf"),
                MakeTags(3, "C#", "LINQ", "Pdf"),
                MakeTags(4, "C#", "LINQ", "Pdf"),
                MakeTags(5, "C#", "LINQ", "Pdf", "JSON"),
                MakeTags(6, "C#", "LINQ", "Pdf", "JavaFX"),
                MakeTags(7, "C#", "LINQ", "Pdf", "JavaFX"),
                MakeTags(8, "C#", "LINQ", "Pdf"),
                MakeTags(9, "C#", "LINQ", "Pdf"),

                MakeTags(10, "Software Enginere", "Pdf"),
                MakeTags(11, "Software Enginere", "Pdf"),
                MakeTags(12, "Software Enginere", "Pdf", "UML"),
                MakeTags(13, "Software Enginere", "Pdf"),
                MakeTags(14, "Software Enginere", "Pdf"),
                MakeTags(15, "Software Enginere", "Pdf"),
                MakeTags(16, "Software Enginere", "Pdf"),
                MakeTags(17, "Software Enginere", "Mp4"),
                MakeTags(18, "Software Enginere", "Jpg")
            ));

            context.Ratings.AddRange(
                new Rating{MaterialId = 1, UserId = 3, Value = 5},
                new Rating{MaterialId = 2, UserId = 4, Value = 4},
                new Rating{MaterialId = 3, UserId = 5, Value = 2},
                new Rating{MaterialId = 4, UserId = 6, Value = 4},
                new Rating{MaterialId = 5, UserId = 7, Value = 3},
                new Rating{MaterialId = 6, UserId = 6, Value = 4},
                new Rating{MaterialId = 7, UserId = 5, Value = 5},
                new Rating{MaterialId = 8, UserId = 4, Value = 5},
                new Rating{MaterialId = 9, UserId = 3, Value = 1},
                new Rating{MaterialId = 10, UserId = 2, Value = 3},
                new Rating{MaterialId = 11, UserId = 1, Value = 5},
                new Rating{MaterialId = 12, UserId = 2, Value = 2},
                new Rating{MaterialId = 13, UserId = 3, Value = 4},
                new Rating{MaterialId = 14, UserId = 4, Value = 3},
                new Rating{MaterialId = 15, UserId = 5, Value = 3},
                new Rating{MaterialId = 16, UserId = 6, Value = 5},
                new Rating{MaterialId = 17, UserId = 7, Value = 5},
                new Rating{MaterialId = 18, UserId = 6, Value = 4},
                new Rating{MaterialId = 17, UserId = 5, Value = 3},
                new Rating{MaterialId = 16, UserId = 4, Value = 2},
                new Rating{MaterialId = 9, UserId = 3, Value = 5},
                new Rating{MaterialId = 12, UserId = 4, Value = 4},
                new Rating{MaterialId = 13, UserId = 5, Value = 3},
                new Rating{MaterialId = 8, UserId = 6, Value = 2},
                new Rating{MaterialId = 5, UserId = 7, Value = 5},
                new Rating{MaterialId = 9, UserId = 6, Value = 4},
                new Rating{MaterialId = 17, UserId = 5, Value = 3},
                new Rating{MaterialId = 5, UserId = 4, Value = 2}
            );

            context.Comments.AddRange(
                new Comment{MaterialId = 2, UserId = 1, Text = "Good PDF!"},
                new Comment{MaterialId = 2, UserId = 3, Text = "Needs more code eksamples"},
                new Comment{MaterialId = 3, UserId = 2, Text = "The Slides are unreadeble"},
                new Comment{MaterialId = 4, UserId = 4, Text = "Multithreading madness"},
                new Comment{MaterialId = 7, UserId = 5, Text = "Go CursedCode"},
                new Comment{MaterialId = 7, UserId = 4, Text = "When do we learn to do this in GoLang???"},
                new Comment{MaterialId = 9, UserId = 3, Text = "Tell me why?"},
                new Comment{MaterialId = 9, UserId = 4, Text = "(Aint nothing but a heart ache)"},
                new Comment{MaterialId = 9, UserId = 2, Text = "Tell me why?!"},
                new Comment{MaterialId = 9, UserId = 6, Text = "(Thought the teacher made a mistake ;)"},
                new Comment{MaterialId = 10, UserId = 5, Text = "That indian guy explained this better..."},
                new Comment{MaterialId = 14, UserId = 2, Text = "Has this been recorded?"},
                new Comment{MaterialId = 15, UserId = 4, Text = "#SpanComment"},
                new Comment{MaterialId = 18, UserId = 2, Text = "Go"},
                new Comment{MaterialId = 18, UserId = 1, Text = "THIS WAS SUCH A FUN EXERCISE!!!"},
                new Comment{MaterialId = 17, UserId = 4, Text = "Is this gonna be on the exam?"},
                new Comment{MaterialId = 3, UserId = 3, Text = "This works in Java too"},
                new Comment{MaterialId = 8, UserId = 7, Text = "er der nogen der f*cking ved hvordan man læser fra en controller, jeg tilter"},
                new Comment{MaterialId = 8, UserId = 3, Text = "sådan her X-Y-B-A-op-ned-venste-højre"},
                new Comment{MaterialId = 5, UserId = 1, Text = "Looking good! Got a new suite there?"}
            );

            await context.SaveChangesAsync();
        }
    }

    public static IEnumerable<Tag> MakeTags(int materialId, params string[] tags)
    {
        foreach (var tag in tags)
        {
            yield return new Tag() { MaterialId = materialId, TagName = tag };
        }
    }

    public static IEnumerable<T> PutTogether<T>(params IEnumerable<T>[] enumerables)
    {
        foreach (var enumerable in enumerables)
        {
            foreach (var item in enumerable)
            {
                yield return item;
            }
        }
    }
}