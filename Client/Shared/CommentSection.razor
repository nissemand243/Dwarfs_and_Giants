@page "/CommenSection/{id}"
@attribute [Authorize]
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

 <table class="table">
                   <thead>
                <tr>
                    <th>Write a Comment</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                    <tr>
                        <td> <textarea class="form-control" id="exampleFormControlTextarea1" rows="3"  @bind="CommentText"></textarea></td>
                        <td>
                                <button class="btn btn-info" @onclick="@(() => CreateComment())">Comment</button>
                        </td>
                    </tr>
                
            </tbody>
        </table> 
@if (CommentList == null)
{
    <p><em>Loading Comments...</em></p>
}
else
{
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th>User Id's</th>
                <th>Comments</th>
                @if(Teacher){
                <th>Action</th>
                }
               
            </tr>
        </thead>

        <tbody>
            @foreach (var comment in CommentList)
            {
                <tr>
                    <td>@comment.UserId</td>
                    <td>@comment.Text</td>  
                    @if(Teacher){
                        <td>
                            <a class="btn btn-danger" @onclick="@(() => DeleteComment(comment.UserId))"> Delete</a>
                        </td>
                    }
                   
             
                 
                </tr>
            }
        </tbody>
    </table>
}
@code{

[Parameter]
    public string Id { get; set; }

    private List<CommentDTO> CommentList {get; set;}
    private bool Teacher;

      private string CommentText;
    private async Task CreateComment()
    {
         if (CommentText != null)
        {
               if (CommentText.Length != 0)
             {
            
                var commentInfo = new List<string>{Id,CommentText};


                var response = await Http.PostAsJsonAsync("api/Comment", commentInfo);

                if (response.IsSuccessStatusCode)
                {
                   CommentList = await Http.GetFromJsonAsync<List<CommentDTO>>($"api/Comment/Comments/{Id}");  
                }
                else
                {
                    CommentText = "UpLoad of Comment failed";
                }
        }

        }
     
    }

     protected override async Task OnInitializedAsync()
    {
        CommentList = await Http.GetFromJsonAsync<List<CommentDTO>>($"api/Comment/Comments/{Id}");  

            // Test Visual Comments
        // CommentList = await MaterialSetup.GetCommentTestMaterial();

       Teacher = await MaterialSetup.GetTeacher();
    }


    private void DeleteComment(int UserId){

        //Delete not yet implemented


    }
}

  