@page "/CommenSection/{Id}"
@attribute [Authorize]
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

 <table class="table">
                   <thead>
                <tr>
                    <th>Write a Comment</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                    <tr>
                        <td> <textarea class="form-control" id="exampleFormControlTextarea1" rows="3"  @bind="CommentText"></textarea></td>
                        <td>
                                <button class="btn btn-info" @onclick="@(() => CreateComment())">Comment</button>
                        </td>
                    </tr>
                
            </tbody>
        </table> 
@if (CommentList == null)
{
    <p><em>Loading Comments...</em></p>
}
else
{
    <table class="table table-bordered table-hover">
        <thead>
            <tr>
                <th>User Id's</th>
                <th>Comments</th>
              
                <th>Action</th>
                
               
            </tr>
        </thead>

        <tbody>
            @foreach (var comment in CommentList)
            {
                <tr>
                    <td>@comment.UserId</td>
                    <td>@comment.Text</td>  
                        <td>
                            <a class="btn btn-danger" @onclick="@(() => DeleteComment(comment.UserId))"> Delete</a>
                        </td>
                   
             
                 
                </tr>
            }
        </tbody>
    </table>
}
@code{

[Parameter]
    public string Id { get; set; }

    private CommentDTO[] CommentList;

      private string CommentText;
    private async Task CreateComment()
    {
         if (CommentText != null)
        {
               if (CommentText.Length != 0)
             {
            
                var commentInfo = new List<string>{Id,CommentText};


                var response = await Http.PostAsJsonAsync("api/Basic", commentInfo);

                if (response.IsSuccessStatusCode)
                {
                    CommentList = await Http.GetFromJsonAsync<CommentDTO[]>($"api/Basic/Comment/{int.Parse(Id)}");  
                }
                else
                {
                    CommentText = "Upload of Comment failed";
                } 
        }

        }
     
    }

     protected override async Task OnInitializedAsync()
    {
        CommentList = await Http.GetFromJsonAsync<CommentDTO[]>($"api/Basic/Comment/{Id}");  

        // Test Visual Comments
        //CommentList = await BlazorMaterialsTest.Show_a_list_of_Comments();

    }


    private async Task DeleteComment(int UserId){

        
                var response = await Http.DeleteAsync($"api/Moderator/Comment/{UserId}");
                 if (response.IsSuccessStatusCode)
                {
                    CommentList = await Http.GetFromJsonAsync<CommentDTO[]>($"api/Basic/Comment/{Id}");  
                }
            
               

    }
}

  